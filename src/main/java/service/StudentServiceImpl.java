package service;

import client.ResultClient;
import com.students_information.stubs.student.*;
import dao.StudentDao;
import domain.Student;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.Status;
import io.grpc.stub.StreamObserver;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class StudentServiceImpl extends StudentServiceGrpc.StudentServiceImplBase {
    // We need to have an instance of the dao class to work with the database
    private StudentDao studentDao = new StudentDao();
    // Let's use a logger to log everything that we want
    private static final Logger logger = Logger.getLogger(StudentServiceImpl.class.getName());

    // We have to override the getStudentInfo that was defined in the StudentService class
    // The StudentService class is an autogenerated class by the proto file
    // So, let's override the getStudentInfo method here.
    @Override
    public void getStudentInfo(StudentRequest request, StreamObserver<StudentResponse> responseObserver) {
        String studentId = request.getStudentId();// the student ID should be passed with the request message

        try{
            Student student = studentDao.findById(studentId); // Let's find the student information from the student table

            /*
                The getResults method will help us to fetch the results for the student from the result service.
                this method will call the result service through its client and bring back the result as a list of strings
             */
            List<String> resultResponse = getResults(studentId);

            // Once all the results are clear, we can build our response message
            StudentResponse studentResponse = StudentResponse.newBuilder()
                    .setStudentId(studentId)
                    .setName(student.getName())
                    .setAge(student.getAge())
                    .setGender(Gender.valueOf(student.getGender()))
                    .setMaths(Grade.valueOf(resultResponse.get(0)))
                    .setArt(Grade.valueOf(resultResponse.get(1)))
                    .setChemistry(Grade.valueOf(resultResponse.get(2)))
                    .build();

            /*
                gRPC works in an asynchronous manner, so if you have ever worked with asynchronous programming
                you would know what will happen with following two methods.
                with the onNext method we send the response, once the response is sent we use onCompleted()
            */
            responseObserver.onNext(studentResponse);
            responseObserver.onCompleted();
        }catch (NoSuchElementException e){
            logger.log(Level.SEVERE, "NO STUDENT FOUND WITH THE STUDENT ID :- "+studentId);

            // If some error occurs we sent an error with the following status which is not_found
            responseObserver.onError(Status.NOT_FOUND.asRuntimeException());
        }
    }

    public List<String> getResults(String studentId){

        // To connect with the ResultClient we need something called a channel
        // This is how you create a channel,
        ManagedChannel channel = ManagedChannelBuilder.forTarget("localhost:8080")
                .usePlaintext()
                .build();

        ResultClient resultClient = new ResultClient(channel);

        return resultClient.getResults(studentId);
    }
}
